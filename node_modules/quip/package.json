{
  "name": "quip",
  "description": "A chainable API for response objects in node",
  "version": "0.1.2",
  "devDependencies": {
    "nodeunit": "0.8.1"
  },
  "main": "./lib/quip",
  "author": {
    "name": "Caolan McMahon"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/caolan/quip.git"
  },
  "bugs": {
    "url": "http://github.com/caolan/quip/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/caolan/quip/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "nodeunit test"
  },
  "readme": "# quip\n\nA convenient chainable API for HTTP ServerResponse objects in node.\n\n* Suited to quick and easy prototyping\n* Works as a [Connect](http://github.com/extjs/Connect) middleware\n* Allows you to pipe streams to the response, while easily setting up\n  the headers and status code beforehand\n\n\n## Examples\n\n#### responding with different status codes\n\n```javascript\nres.ok('<h1>Hello World!</h1>');\nres.notFound('Not found');\n```\n\n#### responding with different mime types\n\n```javascript\nres.text('plain text');\nres.json({'stringify': 'this object'});\n```\n\n#### chaining the two together (in any order)\n\n```javascript\nres.error().json({error: 'something broke'});\nres.xml().badRequest('<test></test>');\n```\n\n#### redirection\n\n```javascript\nres.moved('http://permanent/new/location');\nres.redirect('http://temporary/new/location');\n```\n\n#### custom headers\n\n```javascript\nres.headers({'custom': 'header'}).text('some data');\n```\n\n#### piping data to a response object\n\n```javascript\n// read posts.xml and pipe to response with mime type application/atom+xml\nvar feed = fs.createReadStream('posts.xml');\nfeed.pipe(res.atom());\n```\n\nThe response is completed when data is passed to a status code or mime-type\nfunction, when a redirect is performed, or when a stream is piped to the\nresponse.\n\n\n## Usage\n\nUse quip for specific responses:\n\n    var quip = require('quip'),\n        http = require('http');\n\n    http.createServer(function (req, res) {\n        quip(res).ok('example');\n    });\n\nEnable for all response objects by using quip as a\n[Connect](http://www.senchalabs.org/connect/) middleware:\n\n    var connect = require('connect'),\n        quip = require('quip'),\n\n    var app = connect(\n        quip,\n        function (req, res, next) {\n            res.ok('example');\n        }\n    );\n\n\n## API\n\n* headers - add custom headers to response, returns updated response object\n* status - set status code of response manually, returns updated response\n\n### Status Codes\n\nBy default, the response will have the status code 200 (OK), this can\nbe updated using the following methods. Note that by passing some data\nto these methods, the response will complete. If you don't pass data it will\nreturn an updated response object, allowing you to chain calls together. If\nthe data passed is an object then it will be treated as JSON and the mime\ntype of the response will be updated accordingly.\n\n#### Success\n* res.ok\n* res.created\n* res.accepted\n\n#### Redirection\n* res.moved\n* res.redirect\n* res.found - alias for redirect\n* res.notModified\n\n#### Client Error\n* res.badRequest\n* res.unauthorized\n* res.forbidden\n* res.notFound\n* res.notAllowed\n* res.conflict\n* res.gone\n\n#### Server Error\n* res.error\n\n### Mime Types\n\nBy default, the response will have the mime-type text/html, this can\nbe updated using the following methods. Note that by passing some data\nto these methods, the response will complete. If you don't pass data it will\nreturn an updated response object, allowing you to chain calls together.\nYou can pass an object to the json and jsonp methods and it will be\nstringified before sending.\n\n* res.text\n* res.plain\n* res.html\n* res.xhtml\n* res.css\n* res.xml\n* res.atom\n* res.rss\n* res.javascript\n* res.json\n\n* res.jsonp -- JSONP is a special case that __always__ completes the request,\n  and overrides any previous status code calls. There is no reliable way for\n  a browser to interpret JSONP responses with a status code other than 200.\n  Any error or status information should be included in the JSONP response\n  itself. The jsonp method accepts 2 arguments, a callback name (string) and\n  some JSON data (either a string or an object literal).\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/caolan/quip",
  "_id": "quip@0.1.2",
  "_from": "quip@"
}
